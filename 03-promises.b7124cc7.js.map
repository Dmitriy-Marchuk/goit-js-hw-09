{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,KAAMC,SAASC,cAAc,QAC7BC,OAAQF,SAASC,cAAc,mBAC/BE,MAAOH,SAASC,cAAc,kBAC9BG,KAAMJ,SAASC,cAAc,kBAqC/B,SAASI,EAAcC,EAAUH,GAC/B,OAAO,IAAII,SAAQ,SAACC,EAASC,GAE3BC,YAAW,WACaC,KAAKC,SAAW,GAGpCJ,EAAQ,CAAEF,WAAUH,UAEpBM,EAAO,CAAEH,WAAUH,YAEpBA,MA3CPL,EAAKC,KAAKc,iBAAiB,UAE3B,SAAsBC,GACpBA,EAAEC,iBAMF,IAAIb,EAASc,SAASlB,EAAKI,OAAOe,OAC9BC,EAAQF,SAASlB,EAAKK,MAAMc,OAC5Bb,EAAOY,SAASlB,EAAKM,KAAKa,OAE9B,GAAIC,EAAQ,GAAKhB,EAAS,GAAKE,EAAO,EAEpC,YADAR,EAAAuB,OAAOC,QAAQ,4CAIjB,IAAK,IAAIC,EAAW,EAAGA,GAAYnB,EAASmB,IAC3ChB,EAAcgB,EAAUH,GACxBI,MAAK,SAAAC,G,IAAGjB,EAAQiB,EAARjB,SAAUH,EAAKoB,EAALpB,MACjBP,EAAAuB,OAAOK,QAAQ,qBAAoCC,OAAfnB,EAAS,QAAYmB,OAANtB,EAAM,UAE1DuB,OAAM,SAAAH,G,IAAGjB,EAAQiB,EAARjB,SAAUH,EAAKoB,EAALpB,MAClBP,EAAAuB,OAAOC,QAAQ,oBAAmCK,OAAfnB,EAAS,QAAYmB,OAANtB,EAAM,UAExDe,GAASd,K","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst refs = {\n  form: document.querySelector('form'),\n  amount: document.querySelector('[name=\"amount\"]'),\n  delay: document.querySelector('[name=\"delay\"]'),\n  step: document.querySelector('[name=\"step\"]'),\n};\n\n\n\nrefs.form.addEventListener('submit', handleSubmit);\n\nfunction handleSubmit(e) {\n  e.preventDefault();\n\n  // let amount = Number(e.currentTarget.amount.value);\n  // let delay = Number(e.currentTarget.delay.value);\n  // let step = Number(e.currentTarget.step.value);\n\n  let amount = parseInt(refs.amount.value);\n  let delay = parseInt(refs.delay.value);\n  let step = parseInt(refs.step.value);\n  \n  if (delay < 0 || amount < 0 || step < 0) {\n    Notify.failure('Error! All values must be bigger than 0 ');\n    return;\n  }\n\n  for (let position = 1; position <= amount ; position++) {\n   createPromise(position, delay)\n  .then(({ position, delay }) => {\n    Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n  })\n  .catch(({ position, delay }) => {\n    Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n  });\n    delay += step;\n  }\n\n};\n\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n\n      if (shouldResolve) {\n        resolve({ position, delay});\n      } else {\n        reject({ position, delay});\n      }\n    }, delay)\n  });\n};\n\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$refs","form","document","querySelector","amount","delay","step","$ce04d3a99e08e73b$var$createPromise","position","Promise","resolve","reject","setTimeout","Math","random","addEventListener","e","preventDefault","parseInt","value","delay1","Notify","failure","position1","then","param","success","concat","catch"],"version":3,"file":"03-promises.b7124cc7.js.map"}